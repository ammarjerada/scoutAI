#!/usr/bin/env python3
"""
Script d'initialisation de la base de donn√©es ScoutAI Enhanced
Cr√©e les nouvelles tables pour les fonctionnalit√©s avanc√©es
"""

import mysql.connector
from mysql.connector import Error

# Configuration de la base de donn√©es
DB_CONFIG = {
    'host': 'localhost',
    'database': 'scoutai',
    'user': 'root',
    'password': '',
    'port': 3307,
    'charset': 'utf8mb4'
}

def get_db_connection():
    """√âtablit une connexion √† la base de donn√©es"""
    try:
        connection = mysql.connector.connect(**DB_CONFIG)
        return connection
    except Error as e:
        print(f"‚ùå Erreur de connexion: {e}")
        return None

def add_new_columns():
    """Ajoute les nouvelles colonnes aux tables existantes"""
    connection = get_db_connection()
    if not connection:
        return False
    
    try:
        cursor = connection.cursor()
        
        # Ajouter avatar_url √† la table users
        try:
            cursor.execute("""
                ALTER TABLE users 
                ADD COLUMN avatar_url TEXT DEFAULT NULL
            """)
            print("‚úÖ Colonne avatar_url ajout√©e √† la table users")
        except Error as e:
            if "Duplicate column name" in str(e):
                print("‚ÑπÔ∏è  Colonne avatar_url d√©j√† existante")
            else:
                print(f"‚ö†Ô∏è  Erreur lors de l'ajout de avatar_url: {e}")
        
        connection.commit()
        cursor.close()
        return True
        
    except Error as e:
        print(f"‚ùå Erreur lors de l'ajout des colonnes: {e}")
        return False
    finally:
        connection.close()

def create_new_tables():
    """Cr√©e les nouvelles tables pour les fonctionnalit√©s avanc√©es"""
    connection = get_db_connection()
    if not connection:
        return False
    
    try:
        cursor = connection.cursor()
        
        # Table des √©quipes (Draft Mode)
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS teams (
                team_id INT AUTO_INCREMENT PRIMARY KEY,
                user_id INT NOT NULL,
                name VARCHAR(255) NOT NULL DEFAULT 'Mon √âquipe',
                formation VARCHAR(20) DEFAULT '4-3-3',
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE,
                INDEX idx_user_id (user_id),
                INDEX idx_created_at (created_at)
            ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci
        """)
        print("‚úÖ Table 'teams' cr√©√©e")
        
        # Table des joueurs dans les √©quipes
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS team_players (
                id INT AUTO_INCREMENT PRIMARY KEY,
                team_id INT NOT NULL,
                player_id INT NOT NULL,
                position VARCHAR(20) DEFAULT 'SUB',
                position_x INT DEFAULT 0,
                position_y INT DEFAULT 0,
                added_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (team_id) REFERENCES teams(team_id) ON DELETE CASCADE,
                FOREIGN KEY (player_id) REFERENCES players(player_id) ON DELETE CASCADE,
                UNIQUE KEY unique_team_player (team_id, player_id),
                INDEX idx_team_id (team_id),
                INDEX idx_player_id (player_id)
            ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci
        """)
        print("‚úÖ Table 'team_players' cr√©√©e")
        
        # Table des notifications
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS notifications (
                id INT AUTO_INCREMENT PRIMARY KEY,
                user_id INT NOT NULL,
                title VARCHAR(255) NOT NULL,
                message TEXT NOT NULL,
                type ENUM('info', 'success', 'warning', 'error') DEFAULT 'info',
                is_read BOOLEAN DEFAULT FALSE,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE,
                INDEX idx_user_id (user_id),
                INDEX idx_is_read (is_read),
                INDEX idx_created_at (created_at)
            ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci
        """)
        print("‚úÖ Table 'notifications' cr√©√©e")
        
        # Table des activit√©s utilisateur (pour les admins)
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS user_activities (
                id INT AUTO_INCREMENT PRIMARY KEY,
                user_id INT NOT NULL,
                action VARCHAR(100) NOT NULL,
                details JSON DEFAULT NULL,
                ip_address VARCHAR(45) DEFAULT NULL,
                user_agent TEXT DEFAULT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE,
                INDEX idx_user_id (user_id),
                INDEX idx_action (action),
                INDEX idx_created_at (created_at)
            ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci
        """)
        print("‚úÖ Table 'user_activities' cr√©√©e")
        
        connection.commit()
        cursor.close()
        print("‚úÖ Toutes les nouvelles tables ont √©t√© cr√©√©es avec succ√®s")
        return True
        
    except Error as e:
        print(f"‚ùå Erreur lors de la cr√©ation des tables: {e}")
        return False
    finally:
        connection.close()

def main():
    """Fonction principale d'initialisation"""
    print("üöÄ INITIALISATION DE LA BASE DE DONN√âES ENHANCED")
    print("=" * 50)
    
    # 1. Ajouter les nouvelles colonnes
    print("\n1Ô∏è‚É£  Ajout des nouvelles colonnes...")
    if not add_new_columns():
        print("‚ùå √âchec de l'ajout des colonnes")
        return
    
    # 2. Cr√©er les nouvelles tables
    print("\n2Ô∏è‚É£  Cr√©ation des nouvelles tables...")
    if not create_new_tables():
        print("‚ùå √âchec de la cr√©ation des tables")
        return
    
    print("\nüéâ INITIALISATION ENHANCED TERMIN√âE AVEC SUCC√àS!")
    print("Votre base de donn√©es est pr√™te pour les nouvelles fonctionnalit√©s.")

if __name__ == "__main__":
    main()